{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sairi\\\\OneDrive\\\\Desktop\\\\miniproject implementation\\\\frontend\\\\src\\\\components\\\\Home.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport ReactMarkdown from 'react-markdown';\nimport axios from 'axios';\nimport './home.css';\nimport Navbar from './navbar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = \"http://localhost:5000\";\nconst Chatbot = () => {\n  _s();\n  var _loggedInUser;\n  const [messages, setMessages] = useState([]);\n  const [userInput, setUserInput] = useState(\"\");\n  const messagesEndRef = useRef(null);\n  const navigate = useNavigate();\n  const token = localStorage.getItem(\"token\");\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  };\n\n  // Scroll to the bottom whenever messages update\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  useEffect(() => {\n    if (!token) {\n      navigate(\"/login\");\n    }\n  }, [token, navigate]);\n  const userId = ((_loggedInUser = loggedInUser) === null || _loggedInUser === void 0 ? void 0 : _loggedInUser.id) || \"defaultUser\"; // replace with actual user ID logic\n\n  // 🔹 Load chat history from localStorage for this user\n  useEffect(() => {\n    try {\n      const storedMessages = localStorage.getItem(`chatMessages_${userId}`);\n      if (storedMessages) {\n        setMessages(JSON.parse(storedMessages));\n      }\n    } catch (error) {\n      console.error(\"❌ Error loading chat history:\", error);\n    }\n  }, [userId]);\n\n  // ✅ Save messages to localStorage (per user)\n  useEffect(() => {\n    if (messages.length > 0) {\n      localStorage.setItem(`chatMessages_${userId}`, JSON.stringify(messages));\n    }\n  }, [messages, userId]);\n  const handleUserInput = async e => {\n    e.preventDefault();\n    if (!userInput.trim()) return;\n    const userMessage = {\n      text: userInput,\n      sender: 'user'\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setUserInput('');\n    try {\n      const res = await axios.post(`${API_URL}/chat`, {\n        query: userInput\n      });\n      console.log(\"📊 API Response:\", res.data);\n      let botMessageText = res.data.message || \"No response from the bot.\";\n      if (Array.isArray(res.data.listResponse)) {\n        // Convert response to bullet points\n        botMessageText = \"<ul>\" + res.data.listResponse.map(item => `<li>${item}</li>`).join('') + \"</ul>\";\n      }\n\n      // Ensure we only show a user-friendly response, not JSON\n      if (res.data.friendlyResponse) {\n        botMessageText = res.data.friendlyResponse; // Use formatted response if available\n      }\n      const botMessage = {\n        text: botMessageText,\n        sender: 'bot'\n      };\n      setMessages(prev => [...prev, botMessage]);\n    } catch (error) {\n      console.error(\"❌ Error communicating with chatbot:\", error);\n      setMessages(prev => [...prev, {\n        text: \"Oops! Something went wrong. Please try again.\",\n        sender: 'bot'\n      }]);\n    }\n  };\n  return (\n    /*#__PURE__*/\n    // <div className={`chat-container ${showHistory ? \"history-open\" : \"\"}`}>\n    //     {/* Chat History Panel */}\n    //     <div className={`chat-history ${showHistory ? \"show\" : \"\"}`}>\n    //         <button className=\"toggle-history-btn\" onClick={() => setShowHistory(!showHistory)}>\n    //             🕘\n    //         </button>\n    //         {showHistory && <h3>Chat History</h3>}\n    //         {showHistory &&\n    //             messages.filter(msg => msg.sender === \"user\").map((msg, index) => (\n    //                 <div key={index} className=\"history-message\">\n    //                     {msg.text}\n    //                 </div>\n    //             ))}\n    //     </div>\n    _jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-title\",\n        children: /*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"header\", {\n          className: \"chat-header\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-messages\",\n          children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `message ${msg.sender}`,\n            children: [/*#__PURE__*/_jsxDEV(ReactMarkdown, {\n              components: {\n                h1: ({\n                  children\n                }) => /*#__PURE__*/_jsxDEV(\"h1\", {\n                  style: {\n                    fontSize: '22px',\n                    color: '#ffffff',\n                    fontWeight: 'bold',\n                    marginBottom: '15px'\n                  },\n                  children: children\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 125,\n                  columnNumber: 5\n                }, this),\n                h2: ({\n                  children\n                }) => /*#__PURE__*/_jsxDEV(\"h2\", {\n                  style: {\n                    fontSize: '18px',\n                    color: '#ffffff',\n                    fontWeight: '600',\n                    marginBottom: '10px'\n                  },\n                  children: children\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 130,\n                  columnNumber: 5\n                }, this),\n                p: ({\n                  children\n                }) => /*#__PURE__*/_jsxDEV(\"p\", {\n                  style: {\n                    color: '#ffffff',\n                    marginBottom: '12px',\n                    lineHeight: '1.6'\n                  },\n                  children: children\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 135,\n                  columnNumber: 5\n                }, this),\n                li: ({\n                  children\n                }) => /*#__PURE__*/_jsxDEV(\"li\", {\n                  style: {\n                    color: '#ffffff',\n                    marginLeft: '25px',\n                    marginBottom: '8px',\n                    lineHeight: '1.6'\n                  },\n                  children: children\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 140,\n                  columnNumber: 5\n                }, this)\n              },\n              children: msg.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 29\n            }, this), msg.rawData && /*#__PURE__*/_jsxDEV(\"pre\", {\n              className: \"message-data\",\n              children: JSON.stringify(msg.rawData, null, 2)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 5\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 25\n          }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: messagesEndRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 1\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleUserInput,\n          className: \"chat-input\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: userInput,\n            onChange: e => setUserInput(e.target.value),\n            placeholder: \"Ask me anything...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 1\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 1\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 1\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }, this)\n  );\n};\n_s(Chatbot, \"3eDGhUwWi589D8SzL6VJN8VrjlQ=\", false, function () {\n  return [useNavigate];\n});\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useNavigate","ReactMarkdown","axios","Navbar","jsxDEV","_jsxDEV","API_URL","Chatbot","_s","_loggedInUser","messages","setMessages","userInput","setUserInput","messagesEndRef","navigate","token","localStorage","getItem","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","userId","loggedInUser","id","storedMessages","JSON","parse","error","console","length","setItem","stringify","handleUserInput","e","preventDefault","trim","userMessage","text","sender","prev","res","post","query","log","data","botMessageText","message","Array","isArray","listResponse","map","item","join","friendlyResponse","botMessage","children","className","fileName","_jsxFileName","lineNumber","columnNumber","msg","index","components","h1","style","fontSize","color","fontWeight","marginBottom","h2","p","lineHeight","li","marginLeft","rawData","ref","onSubmit","type","value","onChange","target","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/sairi/OneDrive/Desktop/miniproject implementation/frontend/src/components/Home.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport ReactMarkdown from 'react-markdown';\r\nimport axios from 'axios';\r\nimport './home.css';\r\nimport Navbar from './navbar';\r\n\r\nconst API_URL = \"http://localhost:5000\";\r\n\r\nconst Chatbot = () => {\r\n    const [messages, setMessages] = useState([]);\r\n    const [userInput, setUserInput] = useState(\"\");\r\n    const messagesEndRef = useRef(null); \r\n    const navigate = useNavigate();\r\n    const token = localStorage.getItem(\"token\");\r\n\r\n    const scrollToBottom = () => {\r\n        messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n    };\r\n\r\n    // Scroll to the bottom whenever messages update\r\n    useEffect(() => {\r\n        scrollToBottom();\r\n    }, [messages]);\r\n\r\n\r\nuseEffect(() => {\r\n        if (!token) {\r\n            navigate(\"/login\");\r\n        }\r\n    }, [token, navigate]);\r\n\r\n\r\n\r\n const userId = loggedInUser?.id || \"defaultUser\"; // replace with actual user ID logic\r\n\r\n// 🔹 Load chat history from localStorage for this user\r\nuseEffect(() => {\r\n    try {\r\n        const storedMessages = localStorage.getItem(`chatMessages_${userId}`);\r\n        if (storedMessages) {\r\n            setMessages(JSON.parse(storedMessages));\r\n        }\r\n    } catch (error) {\r\n        console.error(\"❌ Error loading chat history:\", error);\r\n    }\r\n}, [userId]);\r\n\r\n// ✅ Save messages to localStorage (per user)\r\nuseEffect(() => {\r\n    if (messages.length > 0) {\r\n        localStorage.setItem(`chatMessages_${userId}`, JSON.stringify(messages));\r\n    }\r\n}, [messages, userId]);\r\n\r\n    const handleUserInput = async (e) => {\r\n        e.preventDefault();\r\n        if (!userInput.trim()) return;\r\n\r\n        const userMessage = { text: userInput, sender: 'user' };\r\n        setMessages((prev) => [...prev, userMessage]);\r\n        setUserInput('');\r\n\r\n        try {\r\n            const res = await axios.post(`${API_URL}/chat`, { query: userInput });\r\n            console.log(\"📊 API Response:\", res.data);\r\n\r\n            let botMessageText = res.data.message || \"No response from the bot.\";\r\n\r\n            if (Array.isArray(res.data.listResponse)) {\r\n            // Convert response to bullet points\r\n            botMessageText = \"<ul>\" + res.data.listResponse.map(item => `<li>${item}</li>`).join('') + \"</ul>\";\r\n        }\r\n\r\n        \r\n        // Ensure we only show a user-friendly response, not JSON\r\n        if (res.data.friendlyResponse) {\r\n            botMessageText = res.data.friendlyResponse; // Use formatted response if available\r\n        }\r\n\r\n        const botMessage = {\r\n            text: botMessageText,\r\n            sender: 'bot'\r\n        };\r\n        setMessages((prev) => [...prev, botMessage]);\r\n\r\n    } catch (error) {\r\n        console.error(\"❌ Error communicating with chatbot:\", error);\r\n        setMessages((prev) => [...prev, { text: \"Oops! Something went wrong. Please try again.\", sender: 'bot' }]);\r\n    }\r\n};\r\n\r\n\r\n    return (\r\n        // <div className={`chat-container ${showHistory ? \"history-open\" : \"\"}`}>\r\n        //     {/* Chat History Panel */}\r\n        //     <div className={`chat-history ${showHistory ? \"show\" : \"\"}`}>\r\n        //         <button className=\"toggle-history-btn\" onClick={() => setShowHistory(!showHistory)}>\r\n        //             🕘\r\n        //         </button>\r\n        //         {showHistory && <h3>Chat History</h3>}\r\n        //         {showHistory &&\r\n        //             messages.filter(msg => msg.sender === \"user\").map((msg, index) => (\r\n        //                 <div key={index} className=\"history-message\">\r\n        //                     {msg.text}\r\n        //                 </div>\r\n        //             ))}\r\n        //     </div>\r\n        <div>\r\n            <div className=\"chat-title\">\r\n                <Navbar />\r\n            </div>\r\n            {/* Main Chat Section */}\r\n            <div className=\"chat-box\">\r\n                <header className=\"chat-header\">\r\n                    \r\n                </header>\r\n\r\n                <div className=\"chat-messages\">\r\n                    {messages.map((msg, index) => (\r\n                        <div key={index} className={`message ${msg.sender}`}>\r\n                            <ReactMarkdown \r\n    components={{\r\n  h1: ({ children }) => (\r\n    <h1 style={{ fontSize: '22px', color: '#ffffff', fontWeight: 'bold', marginBottom: '15px' }}>\r\n      {children}\r\n    </h1>\r\n  ),\r\n  h2: ({ children }) => (\r\n    <h2 style={{ fontSize: '18px', color: '#ffffff', fontWeight: '600', marginBottom: '10px' }}>\r\n      {children}\r\n    </h2>\r\n  ),\r\n  p: ({ children }) => (\r\n    <p style={{ color: '#ffffff', marginBottom: '12px', lineHeight: '1.6' }}>\r\n      {children}\r\n    </p>\r\n  ),\r\n  li: ({ children }) => (\r\n    <li style={{ color: '#ffffff', marginLeft: '25px', marginBottom: '8px', lineHeight: '1.6' }}>\r\n      {children}\r\n    </li>\r\n  )\r\n}}\r\n\r\n>\r\n    {msg.text}\r\n</ReactMarkdown>\r\n\r\n{msg.rawData && (\r\n    <pre className=\"message-data\">{JSON.stringify(msg.rawData, null, 2)}</pre>\r\n)}\r\n</div>\r\n))}\r\n<div ref={messagesEndRef}></div>\r\n</div>\r\n\r\n<form onSubmit={handleUserInput} className=\"chat-input\">\r\n<input\r\ntype=\"text\"\r\nvalue={userInput}\r\nonChange={(e) => setUserInput(e.target.value)}\r\nplaceholder=\"Ask me anything...\"\r\n/>\r\n<button type=\"submit\">Send</button>\r\n</form>\r\n</div>\r\n</div>\r\n    );\r\n};\r\n\r\nexport default Chatbot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}